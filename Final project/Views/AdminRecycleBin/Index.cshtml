@using Final_project.ViewModel.RecycleBinViewModels
@model RecycleBinViewModel

@{
    ViewData["Title"] = "Recycle Bin";
    Layout = "AdminLayout";

}
<style>
    /* Main Content */
    .main-content {
        flex: 1;
        padding: 2rem;
        background: var(--amazon-light);
    }

    .dashboard-title {
        margin-bottom: 1.5rem;
        padding-bottom: 0.8rem;
        border-bottom: 2px solid var(--amazon-orange);
        animation: fadeIn 1s ease;
    }

        .dashboard-title h1 {
            color: var(--amazon-dark);
            font-size: 2.2rem;
            position: relative;
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .dashboard-title h1:after {
                content: '';
                position: absolute;
                bottom: -12px;
                left: 0;
                width: 60px;
                height: 4px;
                background: var(--amazon-orange);
                border-radius: 2px;
            }


    /* Tabs Navigation */
    .tabs-nav {
        display: flex;
        gap: 10px;
        margin-bottom: 2rem;
        border-bottom: 2px solid rgba(0, 0, 0, 0.1);
    }

    .tab-btn {
        padding: 0.8rem 1.8rem;
        border: none;
        background: transparent;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        position: relative;
        color: #666;
        border-radius: 5px 5px 0 0;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .tab-btn.active {
            color: var(--amazon-orange);
        }

            .tab-btn.active:after {
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                width: 100%;
                height: 4px;
                background: var(--amazon-orange);
                border-radius: 2px;
            }

        .tab-btn:hover {
            color: var(--amazon-dark);
            background: rgba(255, 153, 0, 0.1);
        }

    /* Tab Content */
    .tab-content {
        display: none;
        animation: fadeIn 0.5s ease;
    }

        .tab-content.active {
            display: block;
        }

    /* Stats Section */
    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        border: 1px solid rgba(0, 0, 0, 0.05);
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 15px;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.8rem;
    }

    .icon-red {
        background: rgba(231, 76, 60, 0.15);
        color: var(--amazon-danger);
    }

    .icon-blue {
        background: rgba(52, 152, 219, 0.15);
        color: var(--amazon-info);
    }

    .icon-orange {
        background: rgba(255, 153, 0, 0.15);
        color: var(--amazon-orange);
    }

    .icon-purple {
        background: rgba(155, 89, 182, 0.15);
        color: #9b59b6;
    }

    .stat-info {
        flex: 1;
    }

    .stat-value {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--amazon-dark);
    }

    .stat-label {
        font-size: 0.9rem;
        color: #666;
    }

    /* Products Table */
    .table-container {
        overflow-x: auto;
        margin-top: 2rem;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }

        .data-table th {
            background: var(--amazon-orange);
            color: white;
            text-align: left;
            padding: 1rem;
            font-weight: 600;
        }

        .data-table td {
            padding: 1rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .data-table tr:last-child td {
            border-bottom: none;
        }

        .data-table tr:hover {
            background-color: rgba(255, 153, 0, 0.03);
        }

    .item-image {
        width: 60px;
        height: 60px;
        border-radius: 8px;
        object-fit: cover;
        border: 1px solid #eee;
    }

    .item-info {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .item-details {
        display: flex;
        flex-direction: column;
    }

    .item-name {
        font-weight: 600;
        color: var(--amazon-dark);
        margin-bottom: 0.2rem;
    }

    .item-id {
        font-size: 0.85rem;
        color: #666;
    }

    .deleted-by {
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .deleted-by img {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            object-fit: cover;
        }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        display: inline-block;
    }

    .status-deleted {
        background: rgba(231, 76, 60, 0.15);
        color: var(--amazon-danger);
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.8rem;
    }

    .action-btn {
        padding: 0.6rem 1.2rem;
        border-radius: 50px;
        border: none;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
        z-index: 1;
    }

        .action-btn:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: all 0.6s;
            z-index: -1;
            transform: translateX(-100%);
        }

        .action-btn:hover:before {
            transform: translateX(100%);
        }

        .action-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .action-btn i {
            transition: all 0.3s;
        }

        .action-btn:hover i {
            transform: scale(1.2);
        }

    .btn-restore {
        background: linear-gradient(135deg, var(--amazon-success), #00cc7a);
        color: white;
    }

    .btn-delete {
        background: linear-gradient(135deg, var(--amazon-danger), #ff6b6b);
        color: white;
    }

    /* Bulk Actions */
    .bulk-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1.5rem;
        padding: 1.2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    }

    .select-all {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .bulk-buttons {
        display: flex;
        gap: 1rem;
    }

    .bulk-btn {
        padding: 0.8rem 1.5rem;
        border-radius: 50px;
        border: none;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .bulk-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

    .btn-restore-all {
        background: linear-gradient(135deg, var(--amazon-success), #00cc7a);
        color: white;
    }

    .btn-delete-all {
        background: linear-gradient(135deg, var(--amazon-danger), #ff6b6b);
        color: white;
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.05);
        margin-top: 1rem;
        animation: fadeIn 0.6s ease;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.5s ease;
    }

        .empty-state.show {
            opacity: 1;
            transform: translateY(0);
        }

        .empty-state i {
            font-size: 5rem;
            color: #e0e0e0;
            margin-bottom: 1.5rem;
            display: inline-block;
        }

        .empty-state h3 {
            color: #555;
            font-size: 1.8rem;
            margin-bottom: 0.8rem;
        }

        .empty-state p {
            color: #777;
            font-size: 1.1rem;
            max-width: 500px;
            margin: 0 auto 1.5rem;
            line-height: 1.6;
        }

        .empty-state .action-btn {
            padding: 0.8rem 2rem;
            border-radius: 50px;
            font-size: 1rem;
            margin-top: 1rem;
        }

    /* Add this to existing animations */
    @@keyframes float {
        0% {
            transform: translateY(0px);
        }

        50% {
            transform: translateY(-10px);
        }

        100% {
            transform: translateY(0px);
        }
    }

    /* Animations */
    @@keyframes slideDown {
        from {
            transform: translateY(-100%);
            opacity: 0;
        }

        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes cardEntrance {
        from {
            opacity: 0;
            transform: scale(0.9) translateY(40px);
        }

        to {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    /* Responsive */
    @@media (max-width: 992px) {
        .sidebar {
            width: 70px;
        }

        .sidebar-item span {
            display: none;
        }

        .sidebar-item i {
            margin-right: 0;
        }

        .stats-container {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 768px) {
        .amazon-header {
            flex-direction: column;
            padding: 1rem;
        }

        .logo-section {
            margin-bottom: 1rem;
        }

        .search-bar {
            width: 100%;
            margin-bottom: 1rem;
        }

        .user-actions {
            width: 100%;
            justify-content: space-around;
        }

        .bulk-actions {
            flex-direction: column;
            gap: 15px;
        }

        .tabs-nav {
            flex-wrap: wrap;
        }

        .tab-btn {
            flex: 1;
            justify-content: center;
        }
    }

    @@media (max-width: 576px) {
        .action-buttons {
            flex-direction: column;
            gap: 0.5rem;
        }

        .action-btn {
            width: 100%;
            justify-content: center;
        }

        .bulk-buttons {
            width: 100%;
            justify-content: center;
        }
    }</style>

<!-- Main Content -->
<main class="main-content">
    <div class="dashboard-title">
        <h1><i class="fas fa-trash-alt"></i> Recycle Bin</h1>
    </div>

    <!-- Tabs Navigation -->
    <div class="tabs-nav recycle-bin-card">
        <button class="tab-btn active" data-tab="products">
            <i class="fas fa-box"></i> Deleted Products
        </button>
        <button class="tab-btn" data-tab="categories">
            <i class="fas fa-tags"></i> Deleted Categories
        </button>
        <button class="tab-btn" data-tab="sellers">
            <i class="fas fa-store"></i> Deleted Sellers
        </button>
        <button class="tab-btn" data-tab="support">
            <i class="fas fa-solid fa-user-tie"></i> Deleted Customer Service
        </button>
    </div>

    <!-- Products Tab Content -->
    <div class="tab-content active" id="products-tab">
        @if (Model.DeletedProducts.Any())
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Category</th>
                            <th>Seller</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in Model.DeletedProducts)
                        {
                            <tr data-id="@p.id" data-type="product">
                                <td>
                                    <div class="item-info">
                                        <img src="@p.img_Url" alt="Product" class="item-image">
                                        <div class="item-details">
                                            <!-- FIXED: Added product name -->
                                            <div class="item-name">@p.name</div>
                                        </div>
                                    </div>
                                </td>
                                <td>@p.categoryName</td>
                                <td>
                                    <div class="deleted-by">
                                        <img src="@p.sellerImg" alt="Seller">
                                        <span>@p.sellerName</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn btn-restore">
                                            <i class="fas fa-undo"></i> Restore
                                        </button>
                                        <button class="action-btn btn-delete">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-box-open" style="animation: float 3s ease-in-out infinite;"></i>
                <h3>No Deleted Products</h3>
                <p>The recycle bin for products is currently empty. Deleted products will appear here.</p>
            </div>
        }
    </div>

    <!-- Categories Tab Content -->
    <div class="tab-content" id="categories-tab">
        @if (Model.DeletedCategories.Any())
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>

                            <th>Category</th>
                            <th>Parent Category</th>
                            <th>Deleted By</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var c in Model.DeletedCategories)
                        {
                            <tr data-id="@c.id" data-type="category">
                                <td>
                                    <div class="item-info">
                                        <img src="@c.img_Url" alt="Electronics" class="item-image">
                                        <div class="item-details">
                                            <div class="item-name">@c.name</div>
                                        </div>
                                    </div>
                                </td>
                                <td>@c.ParentCategory</td>
                                <td>
                                    <div class="deleted-by">
                                        <img src="@c.deletedByImg" alt="Admin">
                                        <span>@c.DeletedByUser</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn btn-restore">
                                            <i class="fas fa-undo"></i> Restore
                                        </button>
                                        <button class="action-btn btn-delete">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-tag" style="animation: float 3s ease-in-out infinite 0.2s;"></i>
                <h3>No Deleted Categories</h3>
                <p>There are currently no categories in the recycle bin. Deleted categories will appear here.</p>
            </div>
        }
    </div>

    <!-- Sellers Tab Content -->
    <div class="tab-content" id="sellers-tab">
        @if (Model.DeletedSellers.Any())
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>

                            <th>Seller</th>
                            <th>Deleted At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Seller 1 -->
                        @foreach (var s in Model.DeletedSellers)
                        {
                            <tr data-id="@s.id" data-type="seller">
                                <td>
                                    <div class="item-info">
                                        <img src="@s.img_url" alt="John Smith" class="item-image">
                                        <div class="item-details">
                                            <div class="item-name">@s.name</div>
                                        </div>
                                    </div>
                                </td>

                                <td>@s.deleted_at</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn btn-restore">
                                            <i class="fas fa-undo"></i> Restore
                                        </button>
                                        <button class="action-btn btn-delete">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-store-slash" style="animation: float 3s ease-in-out infinite 0.4s;"></i>
                <h3>No Deleted Sellers</h3>
                <p>The seller recycle bin is empty. Any deleted seller accounts will appear here.</p>
            </div>
        }
    </div>

    <!-- support Tab Content -->
    <div class="tab-content" id="support-tab">
        @if (Model.DeletedCustomerService.Any())
        {
            <div class="table-container">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>Customer Service</th>
                            <th>Deleted At</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var s in Model.DeletedCustomerService)
                        {
                            <tr data-id="@s.id" data-type="customerService">
                                <td>
                                    <div class="item-info">
                                        <img src="@s.img_url" alt="John Smith" class="item-image">
                                        <div class="item-details">
                                            <div class="item-name">@s.name</div>
                                        </div>
                                    </div>
                                </td>

                                <td>@s.deleted_at</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="action-btn btn-restore">
                                            <i class="fas fa-undo"></i> Restore
                                        </button>
                                        <button class="action-btn btn-delete">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-user-slash" style="animation: float 3s ease-in-out infinite 0.6s;"></i>
                <h3>No Deleted Customer Service</h3>
                <p>There are currently no deleted customer service accounts.</p>
            </div>
        }
    </div>
</main>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Card entrance animation
        const card = document.querySelector('.recycle-bin-card');
        card.style.opacity = 0;
        card.style.transform = 'scale(0.9) translateY(20px)';

        setTimeout(() => {
            card.style.transition = 'opacity 0.6s ease, transform 0.6s ease, box-shadow 0.4s ease';
            card.style.opacity = 1;
            card.style.transform = 'scale(1) translateY(0)';
        }, 100);

        // Button hover effects
        const buttons = document.querySelectorAll('.action-btn, .bulk-btn');
        buttons.forEach(button => {
            button.addEventListener('mouseenter', () => {
                button.style.transform = 'translateY(-3px)';
            });

            button.addEventListener('mouseleave', () => {
                button.style.transform = 'translateY(0)';
            });
        });



        // Tab switching functionality
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                // Remove active class from all buttons
                tabBtns.forEach(b => b.classList.remove('active'));
                // Add active class to clicked button
                btn.classList.add('active');

                // Hide all tab contents
                tabContents.forEach(content => content.classList.remove('active'));
                // Show the selected tab content
                const tabId = btn.getAttribute('data-tab');
                document.getElementById(`${tabId}-tab`).classList.add('active');
            });
        });


        setTimeout(() => {
            document.querySelectorAll('.empty-state').forEach(state => {
                state.classList.add('show');
            });
        }, 300);

        // Add floating animation to icons
        const floatIcons = document.querySelectorAll('.empty-state i');
        floatIcons.forEach(icon => {
            icon.style.animation = `float 3s ease-in-out infinite ${Math.random() * 0.5}s`;
        });

    });

    document.addEventListener('DOMContentLoaded', function() {
        async function handleAction(type, id, isDelete = false) {
            const endpointMap = {
                product: {
                    restore: '@Url.Action("RestoreProduct", "AdminRecycleBin")',
                    delete: '@Url.Action("HardDeleteProduct", "AdminRecycleBin")'
                },
                category: {
                    restore: '@Url.Action("RestoreCategory", "AdminRecycleBin")',
                    delete: '@Url.Action("HardDeleteCategory", "AdminRecycleBin")'
                },
                seller: {
                    restore: '@Url.Action("RestoreSeller", "AdminRecycleBin")',
                    delete: '@Url.Action("HardDeleteSeller", "AdminRecycleBin")'
                },
                customerService: {
                    restore: '@Url.Action("RestoreCastomerService", "AdminRecycleBin")',
                    delete: '@Url.Action("HardDeleteCustomerService", "AdminRecycleBin")'
                }
            };

            const url = endpointMap[type][isDelete ? 'delete' : 'restore'];
            const formData = new FormData();
            formData.append('id', id);

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });

                // Handle HTML responses
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return await response.json();
                }

                // Extract error from HTML response
                const text = await response.text();
                const parser = new DOMParser();
                const doc = parser.parseFromString(text, 'text/html');
                const error = doc.querySelector('h1')?.textContent || 'Unknown server error';

                return {
                    success: false,
                    message: `Server error: ${error}`
                };
            } catch (error) {
                return {
                    success: false,
                    message: `Network error: ${error.message}`
                };
            }
        }
        // Handle restore actions
        document.querySelectorAll('.btn-restore').forEach(button => {
            button.addEventListener('click', async function() {
                const row = this.closest('tr');
                const id = row.dataset.id;
                const type = row.dataset.type;

                const result = await handleAction(type, id);
                if (result.success) {
                    row.remove();
                    checkEmptyState(row.closest('.tab-content'));
                } else {
                    alert(`Error: ${result.message}`);
                }
            });
        });

        // Handle permanent delete actions
        document.querySelectorAll('.btn-delete').forEach(button => {
            button.addEventListener('click', async function() {
                if (!confirm('Are you sure? This will permanently delete the item!')) return;

                const row = this.closest('tr');
                const id = row.dataset.id;
                const type = row.dataset.type;

                const result = await handleAction(type, id, true);
                if (result.success) {
                    row.remove();
                    checkEmptyState(row.closest('.tab-content'));
                } else {
                    alert(`Error: ${result.message}`);
                }
            });
        });

        function checkEmptyState(tabContent) {
            const table = tabContent.querySelector('.data-table');
            if (!table) return;

            if (table.querySelectorAll('tbody tr').length === 0) {
                tabContent.querySelector('.table-container').style.display = 'none';
                tabContent.querySelector('.empty-state').style.display = 'block';
            }
        }
    });


</script>
