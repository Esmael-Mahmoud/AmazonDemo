// <auto-generated />
using System;
using Final_project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Final_project.Migrations
{
    [DbContext(typeof(AmazonDBContext))]
    [Migration("20250729112111_fetchLastUpdatesAndAddColorAndSizeToOrderItem")]
    partial class fetchLastUpdatesAndAddColorAndSizeToOrderItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Final_project.Models.AccountLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<string>("ActionType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserID")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("LogID")
                        .HasName("PK__AccountLog__5E5499A8A33FBCA4");

                    b.ToTable("AccountLog");
                });

            modelBuilder.Entity("Final_project.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("date_of_birth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("google_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_login")
                        .HasColumnType("datetime2");

                    b.Property<string>("profile_picture_url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Final_project.Models.audit_log", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("action")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("entity_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("entity_type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ip_address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("new_values")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("old_values")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_agent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("user_id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("Final_project.Models.cart_item", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("added_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("cart_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("product_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("cart_id");

                    b.HasIndex("product_id");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("Final_project.Models.category", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("deleted_by")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("last_modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("last_modified_by")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("parent_category_id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("created_by");

                    b.HasIndex("deleted_by");

                    b.HasIndex("last_modified_by");

                    b.HasIndex("parent_category_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Final_project.Models.chat_message", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("chat_sessionId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("is_read")
                        .HasColumnType("bit");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("sent_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("session_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("chat_sessionId");

                    b.HasIndex("sender_id");

                    b.ToTable("chat_messages");
                });

            modelBuilder.Entity("Final_project.Models.chat_session", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SellerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.ToTable("chat_sessions");
                });

            modelBuilder.Entity("Final_project.Models.discount", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int?>("current_uses")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("discount_type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("max_uses")
                        .HasColumnType("int");

                    b.Property<decimal?>("minimum_order_amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("seller_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("start_date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("value")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("id");

                    b.HasIndex("seller_id");

                    b.ToTable("discounts");
                });

            modelBuilder.Entity("Final_project.Models.order", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("billing_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("buyer_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("delivered_at")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("estimated_delivery_date")
                        .HasColumnType("date");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("order_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("payment_method")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("payment_status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("shipping_address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("total_amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("tracking_number")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("buyer_id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Final_project.Models.order_history", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("changed_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("changed_by")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("order_id");

                    b.ToTable("order_history");
                });

            modelBuilder.Entity("Final_project.Models.order_item", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("discount_applied")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("order_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("product_id")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("seller_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(32)");

                    b.Property<decimal?>("unit_price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.HasIndex("seller_id");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("Final_project.Models.ordersReverted", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RevertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("order_itemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("orderId");

                    b.HasIndex("order_itemId");

                    b.ToTable("Orders_Reverted");
                });

            modelBuilder.Entity("Final_project.Models.product", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Brand")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Colors")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SelectedColorsRaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelectedSizesRaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sizes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("approved_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("approved_by")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("category_id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("discount_price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<bool?>("is_approved")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("last_modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("seller_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("sku")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("stock_quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("seller_id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Final_project.Models.product_discount", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("discount_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("product_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("discount_id");

                    b.HasIndex("product_id");

                    b.ToTable("product_discounts");
                });

            modelBuilder.Entity("Final_project.Models.product_image", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("image_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image_url")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("is_primary")
                        .HasColumnType("bit");

                    b.Property<string>("product_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("uploaded_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.ToTable("product_images");
                });

            modelBuilder.Entity("Final_project.Models.product_review", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("is_verified_purchase")
                        .HasColumnType("bit");

                    b.Property<string>("product_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("rating")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("product_reviews");
                });

            modelBuilder.Entity("Final_project.Models.review_reply", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("is_seller_reply")
                        .HasColumnType("bit");

                    b.Property<string>("replier_id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("reply_text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("review_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("replier_id");

                    b.HasIndex("review_id");

                    b.ToTable("review_reply");
                });

            modelBuilder.Entity("Final_project.Models.shopping_cart", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("last_updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("shopping_carts");
                });

            modelBuilder.Entity("Final_project.Models.support_ticket", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<string>("priority")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("resolved_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("resolved_by")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("status")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("subject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("support_tickets");
                });

            modelBuilder.Entity("Final_project.Models.ticket_history", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("changed_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("changed_by")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("field_changed")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("new_value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("old_value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticket_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("ticket_id");

                    b.ToTable("ticket_history");
                });

            modelBuilder.Entity("Final_project.Models.ticket_message", b =>
                {
                    b.Property<string>("id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("is_read")
                        .HasColumnType("bit");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("sent_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("ticket_id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("id");

                    b.HasIndex("sender_id");

                    b.ToTable("ticket_messages");
                });

            modelBuilder.Entity("Final_project.Models.wishlist", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("wishlists");
                });

            modelBuilder.Entity("Final_project.Models.wishlist_item", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("added_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("wishlist_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.HasIndex("wishlist_id");

                    b.ToTable("wishlist_items");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Final_project.Models.audit_log", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final_project.Models.cart_item", b =>
                {
                    b.HasOne("Final_project.Models.shopping_cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("cart_id");

                    b.HasOne("Final_project.Models.product", "Product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Final_project.Models.category", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Final_project.Models.ApplicationUser", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("deleted_by")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Final_project.Models.ApplicationUser", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("last_modified_by")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Final_project.Models.category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("parent_category_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("LastModifiedByUser");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Final_project.Models.chat_message", b =>
                {
                    b.HasOne("Final_project.Models.chat_session", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("chat_sessionId");

                    b.HasOne("Final_project.Models.ApplicationUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("sender_id");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Final_project.Models.chat_session", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "Customer")
                        .WithMany("ChatSessionsAsCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Final_project.Models.ApplicationUser", "Seller")
                        .WithMany("ChatSessionsAsSeller")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Final_project.Models.discount", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "Seller")
                        .WithMany("Discounts")
                        .HasForeignKey("seller_id");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Final_project.Models.order", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "Buyer")
                        .WithMany("OrdersAsBuyer")
                        .HasForeignKey("buyer_id");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("Final_project.Models.order_history", b =>
                {
                    b.HasOne("Final_project.Models.order", "order")
                        .WithMany()
                        .HasForeignKey("order_id");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Final_project.Models.order_item", b =>
                {
                    b.HasOne("Final_project.Models.order", "order")
                        .WithMany("OrderItems")
                        .HasForeignKey("order_id");

                    b.HasOne("Final_project.Models.product", "product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("Final_project.Models.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("seller_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Seller");

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Final_project.Models.ordersReverted", b =>
                {
                    b.HasOne("Final_project.Models.order", "Order")
                        .WithMany()
                        .HasForeignKey("orderId");

                    b.HasOne("Final_project.Models.order_item", "Order_Item")
                        .WithMany()
                        .HasForeignKey("order_itemId");

                    b.Navigation("Order");

                    b.Navigation("Order_Item");
                });

            modelBuilder.Entity("Final_project.Models.product", b =>
                {
                    b.HasOne("Final_project.Models.category", "category")
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Final_project.Models.ApplicationUser", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("seller_id");

                    b.Navigation("Seller");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Final_project.Models.product_discount", b =>
                {
                    b.HasOne("Final_project.Models.discount", "Discount")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("discount_id");

                    b.HasOne("Final_project.Models.product", "product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.Navigation("Discount");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Final_project.Models.product_image", b =>
                {
                    b.HasOne("Final_project.Models.product", "product")
                        .WithMany("product_images")
                        .HasForeignKey("product_id");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Final_project.Models.product_review", b =>
                {
                    b.HasOne("Final_project.Models.product", "product")
                        .WithMany()
                        .HasForeignKey("product_id");

                    b.HasOne("Final_project.Models.ApplicationUser", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("user_id");

                    b.Navigation("User");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Final_project.Models.review_reply", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "Replier")
                        .WithMany()
                        .HasForeignKey("replier_id");

                    b.HasOne("Final_project.Models.product_review", "review")
                        .WithMany("replies")
                        .HasForeignKey("review_id");

                    b.Navigation("Replier");

                    b.Navigation("review");
                });

            modelBuilder.Entity("Final_project.Models.shopping_cart", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "User")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final_project.Models.support_ticket", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final_project.Models.ticket_history", b =>
                {
                    b.HasOne("Final_project.Models.support_ticket", "Support_Ticket")
                        .WithMany()
                        .HasForeignKey("ticket_id");

                    b.Navigation("Support_Ticket");
                });

            modelBuilder.Entity("Final_project.Models.ticket_message", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "Sender")
                        .WithMany("TicketMessages")
                        .HasForeignKey("sender_id");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Final_project.Models.wishlist", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Final_project.Models.wishlist_item", b =>
                {
                    b.HasOne("Final_project.Models.product", "Product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.wishlist", "Wishlist")
                        .WithMany("Items")
                        .HasForeignKey("wishlist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Final_project.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Final_project.Models.ApplicationUser", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("ChatSessionsAsCustomer");

                    b.Navigation("ChatSessionsAsSeller");

                    b.Navigation("Discounts");

                    b.Navigation("OrdersAsBuyer");

                    b.Navigation("ProductReviews");

                    b.Navigation("Products");

                    b.Navigation("ShoppingCarts");

                    b.Navigation("SupportTickets");

                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("Final_project.Models.chat_session", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("Final_project.Models.discount", b =>
                {
                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("Final_project.Models.order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Final_project.Models.product", b =>
                {
                    b.Navigation("product_images");
                });

            modelBuilder.Entity("Final_project.Models.product_review", b =>
                {
                    b.Navigation("replies");
                });

            modelBuilder.Entity("Final_project.Models.shopping_cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Final_project.Models.wishlist", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
